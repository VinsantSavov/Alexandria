@using System.Threading.Tasks
@using Alexandria.Web.ViewModels.Reviews
@model ReviewsAllViewModel

@{
    ViewData["Title"] = "All Reviews";
}

@{
    async Task DisplayReviews(int? parentId)
    {
        var reviews = Model.AllReviews.Where(r => r.ParentId == parentId);

        if (!reviews.Any())
        {
            return;
        }

        foreach (var review in reviews)
        {
            <div class="row">
                <div class="col-md-12 border">
                    <partial name="_ReviewsListingPartial" model="review" />
                </div>
                <div class="col-md-1 bg-white"></div>
                <div class="col-md-11 bg-light">
                    @{ await DisplayReviews(review.Id); }
                </div>
            </div>
        }
    }
}

<div class="container">
    <div class="row">
        <div class="col-md-2"></div>
        <div class="col-md-8">
            <h3 class="text-center mt-5 mb-3">Community Reviews</h3>
            <h6 class="mb-5 text-center">
                for 
                <a class="text-dark"
                   asp-controller="Books"
                   asp-action="Details"
                   asp-route-id="@Model.Id">
                    @Model.Title
                </a>
                 by 
                <a class="font-italic text-dark"
                   asp-controller="Authors"
                   asp-action="Details"
                   asp-route-id="@Model.Author.Id">
                    @Model.Author.FullName
                </a>
            </h6>
            <div>
                @{ await DisplayReviews(null); }
            </div>
            <div class="row my-4">
                <div class="col-md-3"></div>
                <div class="col-md-6">
                    <partial name="_PaginationPartialWithId" />
                </div>
                <div class="col-md-3"></div>
            </div>
        </div>
    </div>
</div>
<form method="post" id="antiForgeryForm"></form>

@section Scripts{
    <script>
        function createLike(id) {
            var elementId = "likeReview-" + id;
            var reviewCountId = '#reviewLikesCount-' + id;
            var value = document.getElementById(elementId).innerHTML.trim();
            var reviewId = id;
            var data = { reviewId: reviewId, isLiked: true };
            var antiforgeryToken = $('#antiForgeryForm input[name=__RequestVerificationToken]').val();

            if (value.toLowerCase() == "like") {
                data.isLiked = true;
            }
            else {
                data.isLiked = false;
            }

            $.ajax({
                type: "POST",
                url: "/api/Likes",
                data: JSON.stringify(data),
                headers: {
                    'X-CSRF-TOKEN': antiforgeryToken
                },
                success: function (response) {
                    $(reviewCountId).html(response.likesCount);

                    if (value.toLowerCase() == "like") {
                        document.getElementById(elementId).innerHTML = "Unlike";
                    }
                    else {
                        document.getElementById(elementId).innerHTML = "Like";
                    }
                },
                contentType: 'application/json',
            });
        }
    </script>
}